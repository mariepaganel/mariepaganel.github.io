<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Всё устроится математически</title>
  
  <subtitle>Наблюдать и работать</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://kersonova.ru/"/>
  <updated>2019-10-17T19:46:51.000Z</updated>
  <id>http://kersonova.ru/</id>
  
  <author>
    <name>Мария Керсонова</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Ищу работу</title>
    <link href="http://kersonova.ru/2019/10/looking-for-a-job/"/>
    <id>http://kersonova.ru/2019/10/looking-for-a-job/</id>
    <published>2019-10-17T19:46:51.000Z</published>
    <updated>2019-10-17T19:46:51.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="left half-width"><br>  <img src="/images/dream-job-4453054_640.jpg" alt="Image by Gerd Altmann from Pixabay"><br></figure><p>В блоге давно не было обновлений, а всё потому, что я не делаю теперь ничего интересного, о чём можно рассказать. Начальник меня опять подвёл – при этом, я уверена, считая, что это я подвожу его, – и, в общем, я в поиске работы. <a href="https://resume.kersonova.ru" target="_blank" rel="noopener">Резюме</a> вот опубликовала, как бы грустно и пусто оно ни выглядело.</p><p>Со своими проектами у меня всегда было трудно, я, видимо, такой человек, который предпочитает работать на кого-то, в команде и с конкретными задачами. Самостоятельно поднимать тяжёлый коммерческий сайт со сложной задумкой, конечно, весело, но опыта моего на это не хватает, ресурса стрессоучтойчивости тем более. А если вместо зарплаты или просто помощи в разработке меня кормят баснями о светлом будущем, пока сами забираются в Bitrix и прочее 1с, то я вообще перестаю реагировать. Впрочем, перестану жаловаться на прошлую работу, и сосредоточусь на поиске новой.</p><p>В общем, если вам нужен в команду кто-то настолько грустный, как я, совсем немного опытный в PHP, Symfony, Docker и о-чём-я-тут-ещё-писала, см. список тэгов, – то скорее email me. Или, если вы не нанимаете, может, отправьте ссылки на меня кому-то знакомому, у кого есть вакансии.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;left half-width&quot;&gt;&lt;br&gt;  &lt;img src=&quot;/images/dream-job-4453054_640.jpg&quot; alt=&quot;Image by Gerd Altmann from Pixabay&quot;&gt;&lt;br&gt;&lt;/figure&gt;

&lt;
      
    
    </summary>
    
      <category term="День за днём" scheme="http://kersonova.ru/categories/%D0%94%D0%B5%D0%BD%D1%8C-%D0%B7%D0%B0-%D0%B4%D0%BD%D1%91%D0%BC/"/>
    
    
      <category term="ищу работу" scheme="http://kersonova.ru/tags/%D0%B8%D1%89%D1%83-%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%83/"/>
    
  </entry>
  
  <entry>
    <title>Если я пишу на Symfony, почему использую Hexo для блога?</title>
    <link href="http://kersonova.ru/2019/01/why-hexo/"/>
    <id>http://kersonova.ru/2019/01/why-hexo/</id>
    <published>2019-01-09T07:40:12.000Z</published>
    <updated>2019-01-09T07:40:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>Этот пост для начинающих в создании сайтов, которые уже немного разобрались в вопросе, но пока не уверены, где и как размещать свои собственные сайты и блоги. И это не реклама и не призыв делать всё так же, как я – просто описание того, что я использую.</p><p>Меня спросили: <strong>почему, если я пишу на Symfony, я не сделаю себе блог на Symfony?</strong> Неужели не могу написать?<br>Конечно, я могу!</p><p>Но я завела статический блог, потому что он дёшев и прочен. Вместо динамической системы, которая может падать от недостатка ресурсов, это просто html-страницы, немножко css и js. Он лежит на бесплатном хостинге статических сайтов GitHub Pages (просто GitHub-репозиторий), я плачу таким образом только за домен.</p><figure class="left half-width"><br>  <img src="/images/pexels-photo-1591056.jpeg" alt="Photo by Miguel Á. Padriñán from Pexels"><br></figure><p>Для блога мне не нужно никаких сложных функций. Комментарии предоставляет Disqus (хотя я думаю перейти на другое решение, когда будет время разобраться в этом вопросе подробнее), RSS генерирует плагин Hexo.<br><a id="more"></a><br>Кстати о генерации – я пишу посты в Markdown, после ввожу команды<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure></p><p>или даже<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate --deploy</span><br></pre></td></tr></table></figure></p><p>и Hexo делает остальную работу за меня. Вжух – и пост уже в блоге. (Конечно, предварительно я настроила, куда публиковать).</p><p>Отчасти поэтому, кстати, давно не было постов – технические сложности, пришлось переставлять систему вместо обновления, а потом руки не доходили поставить hexo назад. Но в этом году я надеюсь чаще записывать полезное в блог. Рабочие и личные проекты разрастаются, мелкие полезные вещи стоит сохранять на будущее.</p><p>Возвращаясь к генератору статических сайтов. Итак, Hexo сделал всю работу за меня и в блог отправились обновлённые страницы – просто html-страницы. Идеал сайта – лёгкий, простой, всем доступный.</p><p>И, конечно, можно создавать свои темы и плагины или выбрать готовые.</p><p>Есть куча <a href="https://www.staticgen.com/" target="_blank" rel="noopener">генераторов статических сайтов</a>, самый популярный из них, если не ошибаюсь, Jekyll. А GitHub Pages теперь ещё и позволяют к любому репозиторию статического сайта применить не только стандартную, но и одну из пользовательских тем, которых полно. Исследуйте этот вопрос подробнее, если хотите, я интересовалась только поверхностно.</p><p>Я убеждена, что делать сложный сайт нужно только если есть такая необходимость. У моего блога её нет.<br>У некоторых моих других проектов – есть, и я их с удовольствием пишу на Symfony. А для блога – просто использую простые и удобные инструменты, написанные до меня.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Этот пост для начинающих в создании сайтов, которые уже немного разобрались в вопросе, но пока не уверены, где и как размещать свои собственные сайты и блоги. И это не реклама и не призыв делать всё так же, как я – просто описание того, что я использую.&lt;/p&gt;
&lt;p&gt;Меня спросили: &lt;strong&gt;почему, если я пишу на Symfony, я не сделаю себе блог на Symfony?&lt;/strong&gt; Неужели не могу написать?&lt;br&gt;Конечно, я могу!&lt;/p&gt;
&lt;p&gt;Но я завела статический блог, потому что он дёшев и прочен. Вместо динамической системы, которая может падать от недостатка ресурсов, это просто html-страницы, немножко css и js. Он лежит на бесплатном хостинге статических сайтов GitHub Pages (просто GitHub-репозиторий), я плачу таким образом только за домен.&lt;/p&gt;
&lt;figure class=&quot;left half-width&quot;&gt;&lt;br&gt;  &lt;img src=&quot;/images/pexels-photo-1591056.jpeg&quot; alt=&quot;Photo by Miguel Á. Padriñán from Pexels&quot;&gt;&lt;br&gt;&lt;/figure&gt;

&lt;p&gt;Для блога мне не нужно никаких сложных функций. Комментарии предоставляет Disqus (хотя я думаю перейти на другое решение, когда будет время разобраться в этом вопросе подробнее), RSS генерирует плагин Hexo.&lt;br&gt;
    
    </summary>
    
      <category term="Полезное" scheme="http://kersonova.ru/categories/%D0%9F%D0%BE%D0%BB%D0%B5%D0%B7%D0%BD%D0%BE%D0%B5/"/>
    
    
      <category term="блог" scheme="http://kersonova.ru/tags/%D0%B1%D0%BB%D0%BE%D0%B3/"/>
    
      <category term="hexo" scheme="http://kersonova.ru/tags/hexo/"/>
    
      <category term="вопросы" scheme="http://kersonova.ru/tags/%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D1%8B/"/>
    
      <category term="github" scheme="http://kersonova.ru/tags/github/"/>
    
      <category term="хостинг" scheme="http://kersonova.ru/tags/%D1%85%D0%BE%D1%81%D1%82%D0%B8%D0%BD%D0%B3/"/>
    
  </entry>
  
  <entry>
    <title>Обновление части шаблона Twig с помощью Ajax</title>
    <link href="http://kersonova.ru/2018/08/ajax-twig/"/>
    <id>http://kersonova.ru/2018/08/ajax-twig/</id>
    <published>2018-08-21T08:24:08.000Z</published>
    <updated>2018-08-24T10:10:58.334Z</updated>
    
    <content type="html"><![CDATA[<p>Столкнулась с необходимостью обновить часть страницы, созданной в Twig, с помощью ajax-запроса. Как обновить страницу, используя шаблон, где есть готовый цикл, который я хочу снова использовать? В поиске готовых вариантов нашла всего один вопрос на StackOverflow и кучу кривых переводов той же страницы. Возможно, решение такое тривиальное? Или никто не занимается этим? Или мои навыки поиска решений далеки от идеала?<br>В любом случае, на будущее запишу своё решение.<br>Задача и код сильно упрощены, в моём проекте нужно было получать другие объекты.</p><p><strong>Задача</strong>:<br>Каждые 10 секунд обновлять на странице данные: показывать 10 последних комментариев.</p><p><strong>Алгоритм</strong>:</p><ol><li>Ту часть страницы, которую нужно обновлять, выделить в отдельный шаблон.</li><li>При запросе обрабатывать этот отдельный шаблон и отправлять результат в ответе.</li></ol><p>Я использую Symfony 4, и вот в контроллере есть страница, где выводятся последние комментарии:<br><a id="more"></a></p><h3 id="Исходный-код"><a href="#Исходный-код" class="headerlink" title="Исходный код"></a>Исходный код</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">commentsPage</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  $comments = <span class="keyword">$this</span>-&gt;getDoctrine-&gt;getRepository(Comments::class)</span><br><span class="line">            -&gt;findLastTen();</span><br><span class="line"><span class="comment">// метод findLastTen написать в CommentsRepository</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;render(<span class="string">'comments_page.html.twig'</span>,[</span><br><span class="line">            <span class="string">'comments'</span> =&gt; $comments,</span><br><span class="line">        ]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Её шаблон выглядит как-то так (очень упрощаю для примера):</p><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#123;# comments_page.html.twig #&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">extends</span></span> 'base.html.twig' %&#125;</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">block</span></span> main %&#125;</span></span><br><span class="line">&lt;ul&gt;</span><br><span class="line">  <span class="template-tag">&#123;% <span class="name"><span class="keyword">for</span></span> comment in comments %&#125;</span></span><br><span class="line">    &lt;li&gt;<span class="template-variable">&#123;&#123; comment.text &#125;&#125;</span>&lt;/li&gt;</span><br><span class="line">  <span class="template-tag">&#123;% <span class="name"><span class="keyword">endfor</span></span> %&#125;</span></span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">endblock</span></span> %&#125;</span></span><br></pre></td></tr></table></figure><p>При обновлении страницы последние комментарии будут обновляться. А мы хотим делать это без обновления страницы.</p><h3 id="Новый-twig-шаблон"><a href="#Новый-twig-шаблон" class="headerlink" title="Новый twig-шаблон"></a>Новый twig-шаблон</h3><p>Первым делом я выделю кусочек с комментариями в отдельный шаблон. (Лучшие практики: название файла с кусочком шаблона начинается с нижнего подчёркивания).<br><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#123;# _last_comments.html.twig #&#125;</span></span><br><span class="line"></span><br><span class="line">&lt;ul&gt;</span><br><span class="line">  <span class="template-tag">&#123;% <span class="name"><span class="keyword">for</span></span> comment in comments %&#125;</span></span><br><span class="line">    &lt;li&gt;<span class="template-variable">&#123;&#123; comment.text &#125;&#125;</span>&lt;/li&gt;</span><br><span class="line">  <span class="template-tag">&#123;% <span class="name"><span class="keyword">endfor</span></span> %&#125;</span></span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure></p><p>И изменю шаблон первоначальный:<br><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#123;# comments_page.html.twig #&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">extends</span></span> 'base.html.twig' %&#125;</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">block</span></span> main %&#125;</span></span><br><span class="line">  <span class="template-tag">&#123;% <span class="name"><span class="keyword">include</span></span> '_last_comments.html.twig' %&#125;</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">endblock</span></span> %&#125;</span></span><br></pre></td></tr></table></figure></p><h3 id="Новый-php-код"><a href="#Новый-php-код" class="headerlink" title="Новый php-код"></a>Новый php-код</h3><p>Нужно добавить страницу, к которой будем делать ajax-запрос.<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Route</span>("/last-comments", name="last_comments", methods=&#123;"POST"&#125;)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">lastComments</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  $comments = <span class="keyword">$this</span>-&gt;getDoctrine-&gt;getRepository(Comments::class)</span><br><span class="line">            -&gt;findLastTen();</span><br><span class="line"></span><br><span class="line">  $lastComments = <span class="keyword">$this</span>-&gt;renderView(<span class="string">'_last_comments.html.twig'</span>,[</span><br><span class="line">    <span class="string">'comments'</span> =&gt; $comments</span><br><span class="line">  ]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Response($lastComments);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><p>Осталось добавить собственно запрос и повторять его.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;# comments_page.html.twig #&#125;</span><br><span class="line"></span><br><span class="line">&#123;% extends 'base.html.twig' %&#125;</span><br><span class="line">&#123;% block main %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"js-last-comments"</span>&gt;</span></span><br><span class="line">  &#123;% include '_last_comments.html.twig' %&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block javascripts %&#125;</span><br><span class="line">  &#123;&#123; parent() &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    setInterval(function () &#123;</span></span><br><span class="line"><span class="undefined">      $.ajax(&#123;</span></span><br><span class="line"><span class="undefined">          method: 'POST',</span></span><br><span class="line"><span class="undefined">          url: "/last-comments"</span></span><br><span class="line"><span class="undefined">      &#125;).done(function (data) &#123;</span></span><br><span class="line"><span class="undefined">          $('.js-last-comments').html(data);</span></span><br><span class="line"><span class="undefined">      &#125;);</span></span><br><span class="line"><span class="undefined">    &#125;, 10000);</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Столкнулась с необходимостью обновить часть страницы, созданной в Twig, с помощью ajax-запроса. Как обновить страницу, используя шаблон, где есть готовый цикл, который я хочу снова использовать? В поиске готовых вариантов нашла всего один вопрос на StackOverflow и кучу кривых переводов той же страницы. Возможно, решение такое тривиальное? Или никто не занимается этим? Или мои навыки поиска решений далеки от идеала?&lt;br&gt;В любом случае, на будущее запишу своё решение.&lt;br&gt;Задача и код сильно упрощены, в моём проекте нужно было получать другие объекты.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Задача&lt;/strong&gt;:&lt;br&gt;Каждые 10 секунд обновлять на странице данные: показывать 10 последних комментариев.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Алгоритм&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Ту часть страницы, которую нужно обновлять, выделить в отдельный шаблон.&lt;/li&gt;
&lt;li&gt;При запросе обрабатывать этот отдельный шаблон и отправлять результат в ответе.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Я использую Symfony 4, и вот в контроллере есть страница, где выводятся последние комментарии:&lt;br&gt;
    
    </summary>
    
      <category term="Работа" scheme="http://kersonova.ru/categories/%D0%A0%D0%B0%D0%B1%D0%BE%D1%82%D0%B0/"/>
    
      <category term="Рецепты" scheme="http://kersonova.ru/categories/%D0%A0%D0%B0%D0%B1%D0%BE%D1%82%D0%B0/%D0%A0%D0%B5%D1%86%D0%B5%D0%BF%D1%82%D1%8B/"/>
    
    
      <category term="Twig" scheme="http://kersonova.ru/tags/Twig/"/>
    
      <category term="Ajax" scheme="http://kersonova.ru/tags/Ajax/"/>
    
      <category term="Symfony" scheme="http://kersonova.ru/tags/Symfony/"/>
    
  </entry>
  
  <entry>
    <title>Всегда учиться - учитывать реальность</title>
    <link href="http://kersonova.ru/2018/08/always-progress/"/>
    <id>http://kersonova.ru/2018/08/always-progress/</id>
    <published>2018-08-10T16:03:08.000Z</published>
    <updated>2018-08-21T09:30:08.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="right half-width"><br>  <img src="/images/pexels-photo-577585.jpeg" alt="Photo by Kevin Ku from Pexels"><br></figure><p>Я часто встречаю посты о том, что разработчик должен постоянно учиться и развиваться, браться за реальные проекты, рассылать резюме и всячески “прогрессировать”. Советы разной степени полезности о том, как быть крутым. Хотя многие пишут их от чистого сердца, желая помочь новичкам, далеко не все в реальности учитывают новичка как человека.</p><p>Я написала длинный пост о том, как я получала свои знания, но решила не публиковать его: это много личных воспоминаний, достаточно сказать, что путь далеко не был прямым и был полон случайностей. Я уверена, что это обычное дело для любого человека и для любой специальности.</p><p>Вместо этого поста о себе я хочу дать свои советы! И они тоже будут полезны не всем, так что ура относительной полезности в глазах читателя:</p><ol><li>Учитесь так, как вам это нравится.</li><li>Учитесь всегда, но не за счёт собственного здоровья и благополучия.</li><li>Не поддавайтесь на <em>слабо</em> всех этих профи из интернета, они сами чаще всего зарвавшиеся новички. Можно использовать их данные и их мнения, но не подчиняться этим мнениям.</li><li>Сообщество разработчиков должно быть дружественным. Если вы столкнулись с грубостью, то виноваты не вы: что бы вы ни пытались сделать криво, какие бы глупые вопросы ни задавали, если вам ответили грубо – это не из-за вас, это эго отвечающего. При необходимости меняйте сообщество: вы не клялись в верности рыцарскому ордену, это всего лишь один форум или одна группа по интересам.</li><li>Не будьте грубы сами. Если у вас нет моральных сил, которые вы готовы вложить в общение, если нет никакого желания никому помогать, пройдите мимо. Никому не вменяется в обязанность помогать другому, но когда вы сами обнаружите в себе готовность и желание отдавать – это радость и удовольствие.</li><li>Все эти пункты тоже только буковки, написанные одним человеком. Я по эту сторону экрана не могу вам диктовать. Думайте сами по себе, думайте о самих себе и поступайте так, как считаете нужным.</li></ol><p>Я сама только начинаю понимать, что ответственность перед самой собой и установление личных границ не означают лень, грубость или отрешение от мира.</p><p>Посты такого рода, нравоучительно-философские, редко полезны. Куда интереснее и познавательнее читать о новой технологии, о полезной функции или о событии в мире IT. Поэтому этот пост куда полезнее мне самой – и, может быть, проходящие мимо читатели ему порадуются.</p><p>В обучении и в прогрессе учитывается не только желание и воля, но и возможности, и силы, и окружающие, и способности, и вообще реальный мир. Человек не состоит из одной только воли (а если состоит, то не позже чем через пару недель его стоит положить в больницу, чтобы не пришлось хоронить).</p><p>Я советую не прекращать учиться на самой жизни, а не на буковках в бложиках. Где-то там, если вам интересна эта тема, найдётся место HTML, CSS, JavaScript, PHP, Python, C++ и другим страшным буквам и словам.</p><p>И когда у вас будут на то силы, то да, выберите себе проект и делайте его!<br>Я вот делаю <a href="https://jv.kersonova.ru" target="_blank" rel="noopener">соцсеть для проекта “12 книг Верна за 12 месяцев”</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;right half-width&quot;&gt;&lt;br&gt;  &lt;img src=&quot;/images/pexels-photo-577585.jpeg&quot; alt=&quot;Photo by Kevin Ku from Pexels&quot;&gt;&lt;br&gt;&lt;/figure&gt;

&lt;p&gt;Я ч
      
    
    </summary>
    
      <category term="День за днём" scheme="http://kersonova.ru/categories/%D0%94%D0%B5%D0%BD%D1%8C-%D0%B7%D0%B0-%D0%B4%D0%BD%D1%91%D0%BC/"/>
    
      <category term="Обучение" scheme="http://kersonova.ru/categories/%D0%94%D0%B5%D0%BD%D1%8C-%D0%B7%D0%B0-%D0%B4%D0%BD%D1%91%D0%BC/%D0%9E%D0%B1%D1%83%D1%87%D0%B5%D0%BD%D0%B8%D0%B5/"/>
    
    
      <category term="учёба" scheme="http://kersonova.ru/tags/%D1%83%D1%87%D1%91%D0%B1%D0%B0/"/>
    
  </entry>
  
  <entry>
    <title>Правильные папки для установки и конфигурации FOSUserBundle в Symfony 4</title>
    <link href="http://kersonova.ru/2018/07/fosuserbundle-symfony4/"/>
    <id>http://kersonova.ru/2018/07/fosuserbundle-symfony4/</id>
    <published>2018-07-07T10:13:24.000Z</published>
    <updated>2018-07-07T10:13:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>Symfony уже обновилась до 4.1, популярные бандлы добавляют совместимость, а вот документацию обновлять не спешат. Когда я впервые пыталась установить FOSUserBundle, серьёзно запуталась. Для профессионалов это, может, и очевидно, но мне стоило разобраться сначала, как изменилась структура папок и куда теперь смотреть.</p><h2 id="Установка"><a href="#Установка" class="headerlink" title="Установка"></a>Установка</h2><p>Предполагается, что установить Symfony и нужные компоненты вы уже сможете. Требуются Doctrine, Annotations, SwiftMailer, Translation и Twig – всё это уже есть в вашем проекте, если создали его как <code>symfony/website-skeleton</code>, и всё это нужно добавить, если использовали <code>symfony/skeleton</code>. И ещё нужны настроенные в файле .env доступ к базе данных и mailer.<br>Устанавливается FOSUserBundle просто, но шаги установки используют не те файлы, которые сейчас указаны в документации. Пройдёмся по порядку, указываю не полностью инструкцию – её найдёте в <a href="https://symfony.com/doc/current/bundles/FOSUserBundle/index.html" target="_blank" rel="noopener">документации</a> – а правильные папки и файлы в Symfony 4.</p><h3 id="Обработка-шаблонов"><a href="#Обработка-шаблонов" class="headerlink" title="Обработка шаблонов"></a>Обработка шаблонов</h3><p>Иногда FOSUserBundle выдаёт ошибку при установке, если в файле <code>config/packages/framework.yaml</code> не указан обработчик шаблонов.<br>Просто добавить туда <code>templating: engines</code><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">framework:</span></span><br><span class="line"><span class="attr">    templating:</span></span><br><span class="line"><span class="attr">        engines:</span> <span class="string">['twig']</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="Создание-класса-User"><a href="#Создание-класса-User" class="headerlink" title="Создание класса User"></a>Создание класса User</h3><p>В папке <code>src/Entity</code></p><h3 id="security-yaml"><a href="#security-yaml" class="headerlink" title="security.yaml"></a>security.yaml</h3><p>Теперь в <code>config/packages/security.yaml</code></p><h2 id="Базовая-настройка"><a href="#Базовая-настройка" class="headerlink" title="Базовая настройка"></a>Базовая настройка</h2><p>Совсем рядом: <code>config/packages/fos_user.yaml</code><br>В примере у меня уже изменены формы регистрации и редактирования профиля, включено подтверждение регистрации по e-mail.<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># config/packages/fos_user.yaml</span></span><br><span class="line"><span class="attr">fos_user:</span></span><br><span class="line"><span class="attr">    db_driver:</span> <span class="string">orm</span></span><br><span class="line"><span class="attr">    firewall_name:</span> <span class="string">main</span></span><br><span class="line"><span class="attr">    user_class:</span> <span class="string">App\Entity\User</span></span><br><span class="line"><span class="attr">    from_email:</span></span><br><span class="line"><span class="attr">        address:</span> <span class="string">"example@example.ru"</span></span><br><span class="line"><span class="attr">        sender_name:</span> <span class="string">"admin"</span></span><br><span class="line"><span class="attr">    registration:</span></span><br><span class="line"><span class="attr">        confirmation:</span></span><br><span class="line"><span class="attr">            enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">        form:</span></span><br><span class="line"><span class="attr">            type:</span> <span class="string">App\Form\RegistrationFormType</span></span><br><span class="line"><span class="attr">    profile:</span></span><br><span class="line"><span class="attr">        form:</span></span><br><span class="line"><span class="attr">            type:</span> <span class="string">App\Form\ProfileFormType</span></span><br></pre></td></tr></table></figure></p><h3 id="Прописать-адреса"><a href="#Прописать-адреса" class="headerlink" title="Прописать адреса"></a>Прописать адреса</h3><p>В файле <code>config/routes/fos_user.yaml</code>. Если этого файла нет, создать его.<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># config/routes/fos_user.yaml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">fos_user:</span></span><br><span class="line"><span class="attr">    resource:</span> <span class="string">"@FOSUserBundle/Resources/config/routing/all.xml"</span></span><br></pre></td></tr></table></figure></p><p>В остальном инструкция по установке в документации актуальна.</p><h2 id="Замена-стандартных-сообщений-и-шаблонов"><a href="#Замена-стандартных-сообщений-и-шаблонов" class="headerlink" title="Замена стандартных сообщений и шаблонов"></a>Замена стандартных сообщений и шаблонов</h2><h3 id="Переводы"><a href="#Переводы" class="headerlink" title="Переводы"></a>Переводы</h3><p>Чтобы все надписи отображались корректно (на языке, который по умолчанию проставлен в <code>config/services.yaml</code>), должны быть включены переводы в файле <code>config/packages/translation.yaml</code>. Обычно всё там настроено по умолчанию:<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># config/packages/translation.yaml</span></span><br><span class="line"><span class="attr">framework:</span></span><br><span class="line"><span class="attr">    default_locale:</span> <span class="string">'%locale%'</span></span><br><span class="line"><span class="attr">    translator:</span></span><br><span class="line"><span class="attr">        paths:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">'%kernel.project_dir%/translations'</span></span><br><span class="line"><span class="attr">        fallbacks:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">'%locale%'</span></span><br></pre></td></tr></table></figure></p><p>Для того, чтобы изменить сообщения, нужно в папке <code>translations</code> создать файл <code>FOSUserBundle.ru.yml</code> (например, для русского языка). Исходный файл найдёте в <code>vendor/friendsofsymfony/user-bundle/Resources/translations/</code>, там можно структуру посмотреть.<br>Но после изменения файлов переводы не обновляются в отображении страниц, пока не почистить кэш:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/console cache:clear</span><br></pre></td></tr></table></figure></p><h3 id="Шаблоны"><a href="#Шаблоны" class="headerlink" title="Шаблоны"></a>Шаблоны</h3><p>Казалось, что это самое сложное и запутанное, а между тем подсказки охотно выдаёт Profiler.<br>Итак, для замены шаблонов нужно создать папку <code>templates/bundles/FOSUserBundle/</code>, а в ней структура должна быть как в <code>vendor/friendsofsymfony/user-bundle/Resources/views/</code>.<br>Всё заменять совсем не нужно. Например, в рабочем проекте у меня лежат только эти файлы:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── layout.html.twig</span><br><span class="line">├── Profile</span><br><span class="line">│   ├── edit_content.html.twig</span><br><span class="line">│   └── show_content.html.twig</span><br><span class="line">├── Registration</span><br><span class="line">│   ├── confirmed.html.twig</span><br><span class="line">│   ├── email.txt.twig</span><br><span class="line">│   └── register_content.html.twig</span><br><span class="line">└── Security</span><br><span class="line">    └── login_content.html.twig</span><br></pre></td></tr></table></figure></p><p>Остальное просто ссылается на тот же самый layout.html.twig. За что и люблю Twig.</p><p>На этом всё.<br>В конфигурации выше был ещё пример, как указывать <a href="https://symfony.com/doc/master/bundles/FOSUserBundle/overriding_forms.html" target="_blank" rel="noopener">перезаписанные формы</a>, но файл <code>config/services.yaml</code> остался на месте.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Symfony уже обновилась до 4.1, популярные бандлы добавляют совместимость, а вот документацию обновлять не спешат. Когда я впервые пыталась установить FOSUserBundle, серьёзно запуталась. Для профессионалов это, может, и очевидно, но мне стоило разобраться сначала, как изменилась структура папок и куда теперь смотреть.&lt;/p&gt;
&lt;h2 id=&quot;Установка&quot;&gt;&lt;a href=&quot;#Установка&quot; class=&quot;headerlink&quot; title=&quot;Установка&quot;&gt;&lt;/a&gt;Установка&lt;/h2&gt;&lt;p&gt;Предполагается, что установить Symfony и нужные компоненты вы уже сможете. Требуются Doctrine, Annotations, SwiftMailer, Translation и Twig – всё это уже есть в вашем проекте, если создали его как &lt;code&gt;symfony/website-skeleton&lt;/code&gt;, и всё это нужно добавить, если использовали &lt;code&gt;symfony/skeleton&lt;/code&gt;. И ещё нужны настроенные в файле .env доступ к базе данных и mailer.&lt;br&gt;Устанавливается FOSUserBundle просто, но шаги установки используют не те файлы, которые сейчас указаны в документации. Пройдёмся по порядку, указываю не полностью инструкцию – её найдёте в &lt;a href=&quot;https://symfony.com/doc/current/bundles/FOSUserBundle/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;документации&lt;/a&gt; – а правильные папки и файлы в Symfony 4.&lt;/p&gt;
&lt;h3 id=&quot;Обработка-шаблонов&quot;&gt;&lt;a href=&quot;#Обработка-шаблонов&quot; class=&quot;headerlink&quot; title=&quot;Обработка шаблонов&quot;&gt;&lt;/a&gt;Обработка шаблонов&lt;/h3&gt;&lt;p&gt;Иногда FOSUserBundle выдаёт ошибку при установке, если в файле &lt;code&gt;config/packages/framework.yaml&lt;/code&gt; не указан обработчик шаблонов.&lt;br&gt;Просто добавить туда &lt;code&gt;templating: engines&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;framework:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    templating:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;        engines:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;[&#39;twig&#39;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Работа" scheme="http://kersonova.ru/categories/%D0%A0%D0%B0%D0%B1%D0%BE%D1%82%D0%B0/"/>
    
      <category term="Config" scheme="http://kersonova.ru/categories/%D0%A0%D0%B0%D0%B1%D0%BE%D1%82%D0%B0/Config/"/>
    
    
      <category term="Symfony" scheme="http://kersonova.ru/tags/Symfony/"/>
    
  </entry>
  
  <entry>
    <title>Дебаг в PhpStorm с помощью XDebug под Docker, локально</title>
    <link href="http://kersonova.ru/2018/06/phpstorm-docker-xdebug-local/"/>
    <id>http://kersonova.ru/2018/06/phpstorm-docker-xdebug-local/</id>
    <published>2018-06-15T07:50:34.000Z</published>
    <updated>2018-06-15T07:50:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Задача"><a href="#Задача" class="headerlink" title="Задача"></a>Задача</h2><p>Запустить в PhpStorm дебаг php-приложения, запущенного в docker-контейнере на том же компьютере, где работает PhpStorm.<br>Уточняю особенно, что контейнер на той же машине, где IDE, потому что с задачей дебага на удалённом сервере я пока не справилась.</p><h2 id="Настройка-Docker"><a href="#Настройка-Docker" class="headerlink" title="Настройка Docker"></a>Настройка Docker</h2><p>Я пользуюсь <a href="https://phpdocker.io" target="_blank" rel="noopener">генератором docker-compose PHPDocker.io</a>, возьмём его результат за основу. Не забыть в поле Extensions поставить галочку напротив XDebug.<br>После, как обычно, скачать архив, распаковать файлы в корневую папку проекта.<br>В папке /phpdocker/php-fpm, где уже лежит файл с настройками php-ini-overrides.ini, я создала ещё один файл - xdebug.ini.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">; ./phpdocker/php-fpm/xdebug.ini</span></span><br><span class="line"></span><br><span class="line"><span class="attr">zend_extension</span>=/usr/lib/php/<span class="number">20170718</span>/xdebug.so</span><br><span class="line">xdebug.remote_enable=on</span><br><span class="line">xdebug.remote_handler=dbgp</span><br><span class="line">xdebug.remote_port=9000</span><br><span class="line">xdebug.remote_autostart=on</span><br><span class="line">xdebug.remote_connect_back=0</span><br><span class="line">xdebug.idekey=PHPSTORM</span><br></pre></td></tr></table></figure><p>За точными объяснениями настроек отсылаю к <a href="https://xdebug.org/docs/remote" target="_blank" rel="noopener">официальной документации</a>. Замечу только, что порт 9000 можно изменить, но тогда его же нужно изменить в настройках PhpStorm. Кстати, remote_host можно указывать в этом же файле. Перейдём к нему вот-вот, я его указываю в docker-compose для удобства изменения.<br><a id="more"></a><br>Итак, перейдём к docker-compose.yml в корневой папке проекта. Все изменения делаются в сервисе php-fpm.</p><ol><li><p>Подключаем сделанные выше настройки xdebug.ini - добавить в раздел <strong>volumes</strong> строку</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">./phpdocker/php-fpm/xdebug.ini:/etc/php/7.2/mods-available/xdebug.ini</span></span><br></pre></td></tr></table></figure></li><li><p>Установим переменные среды.<br>Cначала для этого стоит узнать ip docker-сети. Обычно это 172.17.0.1, в linux проверить можно командой</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig docker0</span><br></pre></td></tr></table></figure></li></ol><p>И придумать имя сервера для PhpStorm, его будем указывать в настройках. Я ввожу “xdebug-docker”.<br>Добавляем ещё три строчки в docker-compose.yml, в сервис php-fpm:<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">environment:</span></span><br><span class="line"><span class="attr">  XDEBUG_CONFIG:</span> <span class="string">remote_host=172.17.0.1</span></span><br><span class="line"><span class="attr">  PHP_IDE_CONFIG:</span> <span class="string">"serverName=xdebug-docker"</span></span><br></pre></td></tr></table></figure></p><p>Привожу полный docker-compose, который получился в результате. (Обычно ещё сервис с базой данных, но для примера его опускаю):</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./docker-compose.yml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">version:</span> <span class="string">"3.1"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    webserver:</span></span><br><span class="line"><span class="attr">      image:</span> <span class="attr">nginx:alpine</span></span><br><span class="line"><span class="attr">      container_name:</span> <span class="string">xdebug-one-webserver</span></span><br><span class="line"><span class="attr">      working_dir:</span> <span class="string">/application</span></span><br><span class="line"><span class="attr">      volumes:</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">.:/application</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">./phpdocker/nginx/nginx.conf:/etc/nginx/conf.d/default.conf</span></span><br><span class="line"><span class="attr">      ports:</span></span><br><span class="line"><span class="bullet">       -</span> <span class="string">"9122:80"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    php-fpm:</span></span><br><span class="line"><span class="attr">      build:</span> <span class="string">phpdocker/php-fpm</span></span><br><span class="line"><span class="attr">      container_name:</span> <span class="string">xdebug-one-php-fpm</span></span><br><span class="line"><span class="attr">      working_dir:</span> <span class="string">/application</span></span><br><span class="line"><span class="attr">      volumes:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">.:/application</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">./phpdocker/php-fpm/php-ini-overrides.ini:/etc/php/7.2/fpm/conf.d/99-overrides.ini</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">./phpdocker/php-fpm/xdebug.ini:/etc/php/7.2/mods-available/xdebug.ini</span> <span class="comment">#файл настроек XDebug</span></span><br><span class="line"><span class="attr">      environment:</span></span><br><span class="line"><span class="attr">        XDEBUG_CONFIG:</span> <span class="string">remote_host=172.17.0.1</span> <span class="comment">#docker network ip</span></span><br><span class="line"><span class="attr">        PHP_IDE_CONFIG:</span> <span class="string">"serverName=xdebug-docker"</span> <span class="comment">#имя сервера в PhpStorm; должно совпадать с тем, что в указываем в следующем шаге</span></span><br></pre></td></tr></table></figure><h2 id="Настройка-PhpStorm"><a href="#Настройка-PhpStorm" class="headerlink" title="Настройка PhpStorm"></a>Настройка PhpStorm</h2><p>Теперь придётся с картинками.</p><h3 id="Настройка-сервера"><a href="#Настройка-сервера" class="headerlink" title="Настройка сервера"></a>Настройка сервера</h3><p>Заходим в настройки File &gt; Settings, ищем Server и добавляем новый сервер с тем же именем, которое только что указали в docker-compose. Адрес соответственно тоже ваш, порт тот же, что указан в docker-compose.<br>Указать mappings для папки public: абсолютный путь внутри контейнера /application/public</p><figure class="left full-width">  <img src="/images/phpdebugserverconfig-local.png" alt="Настройка сервера"></figure><p>Если вы указали другой (не 9000) порт в файле xdebug.ini, зайдите сразу в раздел настроек Debug и измените номер порта там.<br>Закрываем окно настроек.</p><h3 id="Debug-configuration"><a href="#Debug-configuration" class="headerlink" title="Debug configuration"></a>Debug configuration</h3><p>Открываем Run &gt; Edit Configurations и добавляем новую конфигурацию для PHP Remote Debug. Имя любое, сервер выбрать из списка, а ключ тот же, что мы указывали в xdebug.ini.</p><figure class="left full-width"><img src="/images/phpdebugconfig.png" alt="Настройка дебага"></figure><h2 id="Запуск"><a href="#Запуск" class="headerlink" title="Запуск"></a>Запуск</h2><p>Запустим приложение. Выполнить (в корневой папке проекта)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-compose build</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure></p><p>Предполагается, что точки для дебага в PhpStorm мы поставили. Запустить дебаг в PhpStorm можно в том же меню Run &gt; Debug или на панели инструментов. Дебаг не заработает, пока PhpStorm не будет прислушиваться к соединениям!<br>После этого можно обращаться любым образом к localhost:9122. Открыть этот адрес в браузере или выполнить<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl localhost:9122</span><br></pre></td></tr></table></figure></p><p>Переход к следующей точке по F8. И это всё, что я знаю о собственно процессе дебага в PhpStorm: пока я убивалась об попытки установить то же самое для дебага на удалённом сервере, я ничего не узнала о собственно работе с этим.<br>Я надеюсь, я решу задачу с удалённым хостом и напишу о ней. А на сегодня всё.</p><h4 id="Ссылки"><a href="#Ссылки" class="headerlink" title="Ссылки"></a>Ссылки</h4><p>Кроме указанной документации мне очень помогли инструкции от <a href="https://gist.github.com/esilvajr/df244d5c8459403ee68eaf83773054e4" target="_blank" rel="noopener">esilvajr</a>, который показал, как это настроить с файлами от phpdocker.io, и <a href="https://randyfay.com/content/remote-drupalphp-debugging-xdebug-and-phpstorm" target="_blank" rel="noopener">rfay</a>, который подробно расписал процесс удалённого подключения (на реально удалённом сервере пока не сработало, но docker-контейнер с отдельным веб-сервером как бы удалённый с точки зрения системы).<br>Если мой пост недостаточно внятный, вы можете обратиться к их статьям.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Задача&quot;&gt;&lt;a href=&quot;#Задача&quot; class=&quot;headerlink&quot; title=&quot;Задача&quot;&gt;&lt;/a&gt;Задача&lt;/h2&gt;&lt;p&gt;Запустить в PhpStorm дебаг php-приложения, запущенного в docker-контейнере на том же компьютере, где работает PhpStorm.&lt;br&gt;Уточняю особенно, что контейнер на той же машине, где IDE, потому что с задачей дебага на удалённом сервере я пока не справилась.&lt;/p&gt;
&lt;h2 id=&quot;Настройка-Docker&quot;&gt;&lt;a href=&quot;#Настройка-Docker&quot; class=&quot;headerlink&quot; title=&quot;Настройка Docker&quot;&gt;&lt;/a&gt;Настройка Docker&lt;/h2&gt;&lt;p&gt;Я пользуюсь &lt;a href=&quot;https://phpdocker.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;генератором docker-compose PHPDocker.io&lt;/a&gt;, возьмём его результат за основу. Не забыть в поле Extensions поставить галочку напротив XDebug.&lt;br&gt;После, как обычно, скачать архив, распаковать файлы в корневую папку проекта.&lt;br&gt;В папке /phpdocker/php-fpm, где уже лежит файл с настройками php-ini-overrides.ini, я создала ещё один файл - xdebug.ini.&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;; ./phpdocker/php-fpm/xdebug.ini&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;zend_extension&lt;/span&gt;=/usr/lib/php/&lt;span class=&quot;number&quot;&gt;20170718&lt;/span&gt;/xdebug.so&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xdebug.remote_enable=on&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xdebug.remote_handler=dbgp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xdebug.remote_port=9000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xdebug.remote_autostart=on&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xdebug.remote_connect_back=0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xdebug.idekey=PHPSTORM&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;За точными объяснениями настроек отсылаю к &lt;a href=&quot;https://xdebug.org/docs/remote&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;официальной документации&lt;/a&gt;. Замечу только, что порт 9000 можно изменить, но тогда его же нужно изменить в настройках PhpStorm. Кстати, remote_host можно указывать в этом же файле. Перейдём к нему вот-вот, я его указываю в docker-compose для удобства изменения.&lt;br&gt;
    
    </summary>
    
      <category term="Работа" scheme="http://kersonova.ru/categories/%D0%A0%D0%B0%D0%B1%D0%BE%D1%82%D0%B0/"/>
    
      <category term="Рецепты" scheme="http://kersonova.ru/categories/%D0%A0%D0%B0%D0%B1%D0%BE%D1%82%D0%B0/%D0%A0%D0%B5%D1%86%D0%B5%D0%BF%D1%82%D1%8B/"/>
    
    
      <category term="Docker" scheme="http://kersonova.ru/tags/Docker/"/>
    
      <category term="PhpStorm" scheme="http://kersonova.ru/tags/PhpStorm/"/>
    
      <category term="XDebug" scheme="http://kersonova.ru/tags/XDebug/"/>
    
  </entry>
  
  <entry>
    <title>Приключения с SSL</title>
    <link href="http://kersonova.ru/2018/05/ssl-adventures/"/>
    <id>http://kersonova.ru/2018/05/ssl-adventures/</id>
    <published>2018-05-31T12:10:51.000Z</published>
    <updated>2018-05-31T12:10:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>На одной неделе дважды занималась конкретно вопросами ssl-сертификатов для сайтов.<br>Во-первых, собственный блог – можете заметить, теперь “защищённое соединение”. Оказывается, GitHub Pages (где блог размещён) прямо <em>в начале этого мая</em> начали поддерживать ssl-сертификаты и перенаправление на https для других доменов. Когда я создавала блог, поддерживали только для собственных, поэтому когда я перешла на свой домен (хорошо иметь редкую фамилию))), то сначала оставалась без безопасности.<br>Чтобы получить перенаправление на https, нужно было просто убрать из настроек custom domain и после добавить назад. Сделала это несколько дней назад, как только узнала. Стоило за новостями следить, но, честное слово, мне много чего <em>стоило бы делать</em>.</p><p>Во-вторых, по работе прямо сегодня возник тот же вопрос. <a id="more"></a> Заменили одно готовое решение на другое, сделанное на его основе: раньше использовали для своих внутренних проектов чистый <a href="https://github.com/jwilder/nginx-proxy" target="_blank" rel="noopener">Nginx-Proxy от @jwilder</a> (постом ниже о некотором применении для него писала), а сегодня ставила <a href="https://github.com/evertramos/docker-compose-letsencrypt-nginx-proxy-companion" target="_blank" rel="noopener">решение от @evertramos</a> с автоматическим получением/обновлением сертификатов Let’s Encrypt.</p><figure class="left full-width"><br>  <img src="https://raw.githubusercontent.com/evertramos/images/master/webproxy.jpg" alt=" "><br></figure><p>Просто добавить -e LETSENCRYPT_HOST в файлы docker-compose существующих сервисов.<br>Случилось, что один контейнер, который уже был присоединён к сети nginx-proxy к моменту установки нового Nginx-контейнера, не получил своего сертификата. Решилось просто: убрать этот неполучивший (docker-compose down, данные во внешнем томе и это их не затронуло), перезапустить nginx, загрузить неполучивший заново (docker-compose up -d), перезагрузить nginx. Умнее было бы, наверное, выключить все нужные сервисы перед установкой новой версии. Ну хоть решилось всё быстро и без проблем.<br>Говорят, завтра будем на какой-то крутой сервер всё это ставить.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;На одной неделе дважды занималась конкретно вопросами ssl-сертификатов для сайтов.&lt;br&gt;Во-первых, собственный блог – можете заметить, теперь “защищённое соединение”. Оказывается, GitHub Pages (где блог размещён) прямо &lt;em&gt;в начале этого мая&lt;/em&gt; начали поддерживать ssl-сертификаты и перенаправление на https для других доменов. Когда я создавала блог, поддерживали только для собственных, поэтому когда я перешла на свой домен (хорошо иметь редкую фамилию))), то сначала оставалась без безопасности.&lt;br&gt;Чтобы получить перенаправление на https, нужно было просто убрать из настроек custom domain и после добавить назад. Сделала это несколько дней назад, как только узнала. Стоило за новостями следить, но, честное слово, мне много чего &lt;em&gt;стоило бы делать&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Во-вторых, по работе прямо сегодня возник тот же вопрос.
    
    </summary>
    
      <category term="Работа" scheme="http://kersonova.ru/categories/%D0%A0%D0%B0%D0%B1%D0%BE%D1%82%D0%B0/"/>
    
    
      <category term="Docker" scheme="http://kersonova.ru/tags/Docker/"/>
    
      <category term="nginx" scheme="http://kersonova.ru/tags/nginx/"/>
    
      <category term="заметки" scheme="http://kersonova.ru/tags/%D0%B7%D0%B0%D0%BC%D0%B5%D1%82%D0%BA%D0%B8/"/>
    
  </entry>
  
  <entry>
    <title>Доступ к базе данных в docker-compose</title>
    <link href="http://kersonova.ru/2018/04/docker-compose-db-path/"/>
    <id>http://kersonova.ru/2018/04/docker-compose-db-path/</id>
    <published>2018-04-22T11:08:18.000Z</published>
    <updated>2018-04-22T11:08:18.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>Это была очень глупая и очень неприятная проблема, поэтому я обязана это записать, чтобы не повторять ошибку!</em><br>Задача: иметь доступ к контейнеру с базой из контейнера с php-приложением.</p><p>Допустим, у нас есть файл docker-compose.yml (пример сгенерировала в <a href="https://phpdocker.io/" target="_blank" rel="noopener">phpdocker.io</a>):<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3.1"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    mysql:</span></span><br><span class="line"><span class="attr">      image:</span> <span class="attr">mysql:5.7</span></span><br><span class="line"><span class="attr">      container_name:</span> <span class="string">my-project-mysql</span></span><br><span class="line"><span class="attr">      working_dir:</span> <span class="string">/application</span></span><br><span class="line"><span class="attr">      volumes:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">.:/application</span></span><br><span class="line"><span class="attr">      environment:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">MYSQL_ROOT_PASSWORD=root-password</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">MYSQL_DATABASE=my-database</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">MYSQL_USER=my-user</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">MYSQL_PASSWORD=my-password</span></span><br><span class="line"><span class="attr">      ports:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">"8082:3306"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    webserver:</span></span><br><span class="line">      <span class="string">&lt;...&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    php-fpm:</span></span><br><span class="line">      <span class="string">&lt;...&gt;</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><p>Мы добросовестно запускаем<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose up</span><br></pre></td></tr></table></figure></p><p>и хотим получить для своего приложения доступ к базе MySQL, запущенной в этом контейнере.<br>Для того, чтобы подключиться к базе вне контейнера, можно использовать хост:порт 127.0.0.1:8082.<br>И вот тут я запуталась и посчитала, что и из контейнера php-fpm мы доступ к базе получим через тот же адрес. <em>Неверно!</em><br>Docker-compose при запуске создаёт внутреннюю сеть, в которой сервисы обращаются друг к другу по именам. По именам сервисов, не контейнеров. В нашем случае, адрес базы данных просто “mysql” со стандартным портом.</p><p>Так что подключать базу нужно как-то так:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$mysqli = <span class="keyword">new</span> mysqli(<span class="string">"mysql"</span>, <span class="string">"my-user"</span>, <span class="string">"my-password"</span>, <span class="string">"my-database"</span>);</span><br></pre></td></tr></table></figure></p><p>Или, в моём случае, прописывать в файле .env для Symfony 4:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DATABASE_URL=mysql://my-user:my-password@mysql:3306/my-database</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;Это была очень глупая и очень неприятная проблема, поэтому я обязана это записать, чтобы не повторять ошибку!&lt;/em&gt;&lt;br&gt;Задача: иметь доступ к контейнеру с базой из контейнера с php-приложением.&lt;/p&gt;
&lt;p&gt;Допустим, у нас есть файл docker-compose.yml (пример сгенерировала в &lt;a href=&quot;https://phpdocker.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;phpdocker.io&lt;/a&gt;):&lt;br&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;version:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;3.1&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;services:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    mysql:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      image:&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;mysql:5.7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      container_name:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;my-project-mysql&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      working_dir:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;/application&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      volumes:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;        -&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;.:/application&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      environment:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;        -&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;MYSQL_ROOT_PASSWORD=root-password&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;        -&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;MYSQL_DATABASE=my-database&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;        -&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;MYSQL_USER=my-user&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;        -&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;MYSQL_PASSWORD=my-password&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;      ports:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;bullet&quot;&gt;        -&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;8082:3306&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    webserver:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&amp;lt;...&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;    php-fpm:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&amp;lt;...&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Работа" scheme="http://kersonova.ru/categories/%D0%A0%D0%B0%D0%B1%D0%BE%D1%82%D0%B0/"/>
    
      <category term="Config" scheme="http://kersonova.ru/categories/%D0%A0%D0%B0%D0%B1%D0%BE%D1%82%D0%B0/Config/"/>
    
    
      <category term="Symfony" scheme="http://kersonova.ru/tags/Symfony/"/>
    
      <category term="Docker" scheme="http://kersonova.ru/tags/Docker/"/>
    
      <category term="MySQL" scheme="http://kersonova.ru/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Перенаправление виртуального хоста для nginx-proxy в Docker</title>
    <link href="http://kersonova.ru/2018/04/nginx-docker-redirect/"/>
    <id>http://kersonova.ru/2018/04/nginx-docker-redirect/</id>
    <published>2018-04-16T10:19:08.000Z</published>
    <updated>2018-04-17T15:45:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>По работе потребовалось: на некоторый период времени перенаправлять запросы на другой сайт (отправлять клиентов, которые не платят за услугу, на страницу оплаты). Используется <a href="https://hub.docker.com/r/jwilder/nginx-proxy/" target="_blank" rel="noopener">автоматический обратный прокси-сервер nginx от jwilder</a>.<br>Решение кажется очевидным и простым (и, вероятно, грубым), но я определённо рада, что нашла хоть такое. Основное преимущество: <strong>настройки в отдельном файле для каждого сайта</strong>, что делает проще автоматизацию перенаправления.</p><p>Для этого при создании контейнера с nginx нужно прописать дополнительные тома для настроек: conf.d для общих настроек и vhost.d, где будут храниться файлы для каждого виртуального хоста.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d -p 80:80 -p 443:443 \</span><br><span class="line">  --name nginx \</span><br><span class="line">  -v /path/to/conf.d:/etc/nginx/conf.d \</span><br><span class="line">  -v /path/to/vhost.d:/etc/nginx/vhost.d:ro \</span><br><span class="line">  jwilder/nginx-proxy</span><br></pre></td></tr></table></figure><a id="more"></a><p>Или, если nginx-контейнер запускаем с помощью docker-compose (version: ‘2’), добавить строчки<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">volumes:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">./conf.d:/etc/nginx/conf.d</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">./vhost.d:/etc/nginx/vhost.d:ro</span></span><br></pre></td></tr></table></figure></p><p>Перед созданием контейнера с сайтом в папку vhost.d поместить файл с названием, которое соответствует нашему сайту с добавлением “_location”. Для перенаправления в него нужно записать только одну строчку – об этом ниже. Если пока никаких специфических настроек нет, оставить пустым.</p><p>Далее как при обычном запуске контейнера с обратным прокси от jwilder с помощью docker run или docker-compose в переменную среды VITRUAL_HOST вписать “example.com”.<br>При перезапуске контейнера nginx он кроме прочих автоматически добавит в /path/to/conf.d/default.conf строчки<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    proxy_pass http://example.com;</span><br><span class="line">    include /etc/nginx/vhost.d/example.com_location;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>Основная настройка на этом завершена.<br>В случае, когда потребуется сделать перенаправление, в файл добавим строчку с даннными о том, куда перенаправить сайт:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">'return 302 http://new-path.com;'</span> &gt; /path/to/vhost.d/example.com_location</span><br></pre></td></tr></table></figure></p><p>Код 302 – “Moved Temporarily”.</p><p>Теперь для автоматизации нужно найти конкретный файл, изменить таким образом его содержимое и перезагрузить настройки для nginx:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> nginx sh -c <span class="string">'exec nginx -s reload'</span></span><br></pre></td></tr></table></figure></p><p>Если дойдём до той пресловутой автоматизации, напишу об этом после.<br>Замечание: если сайт доступен по нескольким адресам – например, <a href="http://www.example.com" target="_blank" rel="noopener">www.example.com</a> и example.com, – рекомендуют использовать символические ссылки.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;По работе потребовалось: на некоторый период времени перенаправлять запросы на другой сайт (отправлять клиентов, которые не платят за услугу, на страницу оплаты). Используется &lt;a href=&quot;https://hub.docker.com/r/jwilder/nginx-proxy/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;автоматический обратный прокси-сервер nginx от jwilder&lt;/a&gt;.&lt;br&gt;Решение кажется очевидным и простым (и, вероятно, грубым), но я определённо рада, что нашла хоть такое. Основное преимущество: &lt;strong&gt;настройки в отдельном файле для каждого сайта&lt;/strong&gt;, что делает проще автоматизацию перенаправления.&lt;/p&gt;
&lt;p&gt;Для этого при создании контейнера с nginx нужно прописать дополнительные тома для настроек: conf.d для общих настроек и vhost.d, где будут храниться файлы для каждого виртуального хоста.&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker run -d -p 80:80 -p 443:443 \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  --name nginx \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  -v /path/to/conf.d:/etc/nginx/conf.d \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  -v /path/to/vhost.d:/etc/nginx/vhost.d:ro \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  jwilder/nginx-proxy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Работа" scheme="http://kersonova.ru/categories/%D0%A0%D0%B0%D0%B1%D0%BE%D1%82%D0%B0/"/>
    
      <category term="Рецепты" scheme="http://kersonova.ru/categories/%D0%A0%D0%B0%D0%B1%D0%BE%D1%82%D0%B0/%D0%A0%D0%B5%D1%86%D0%B5%D0%BF%D1%82%D1%8B/"/>
    
    
      <category term="Docker" scheme="http://kersonova.ru/tags/Docker/"/>
    
      <category term="nginx" scheme="http://kersonova.ru/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Первый пост</title>
    <link href="http://kersonova.ru/2018/04/first-post/"/>
    <id>http://kersonova.ru/2018/04/first-post/</id>
    <published>2018-04-13T23:18:43.000Z</published>
    <updated>2018-04-14T12:56:00.486Z</updated>
    
    <content type="html"><![CDATA[<figure class="left half-width"><br>  <img src="/images/typewriter.jpg" alt="Новый блог! so exciting!"><br></figure><p>Я создала новый блог, ура! Поскольку некоторые платформы, на которых я пытаюсь вести блоги, в последнее время то и дело оказываются под угрозой закрытия или блокировки, мне остаётся только завести ещё один блог!<br>Этот блог совершенно открытый и, вероятно, будет посвящён в основном вещам техническим, связанным с работой и личными открытиями. И, конечно, для Верна место найдётся! За личными постами, которые открываются только для друзей, придётся заходить в другие мои блоги. Я постараюсь их не забрасывать.<br><a id="more"></a></p><h3 id="Кто-я"><a href="#Кто-я" class="headerlink" title="Кто я"></a>Кто я</h3><p>Я решила для этого блога не скрывать свою фамилию. Но чаще я использую никнейм <em>Marie Paganel</em> или <em>Мари Паганель</em> – в честь одного из любимых литературных героев.<br>Я начинающий разработчик на php и начинающий DevOps в одной маленькой и тоже во многом начинающей конторе. Эта новая работа меня и вдохновила начать новый блог. Я хочу развиваться и изучать новое! Здесь, конечно, будут полезные заметки на этом пути.<br>Ещё я жюль-вернистка. Это значит, что я изучаю жизнь и творчество писателя Жюля Верна, участвую в мероприятиях, ему посвящённых (случается, даже организовываю), пишу о нём статьи и просто постоянно читаю его и сообщаю всем, что ещё нового вычитала. Список самых важных или интересных (или напечатанных) моих статей появится на странице About/Обо мне.<br>Я администратор группы <a href="http://vk.com/j_vern" target="_blank" rel="noopener">Произведения Жюля Верна</a>, если вы ещё не знаете о ней – скорее подпишитесь! Ещё в социальной сети ВКонтакте я веду группу <a href="http://vk.com/read_write" target="_blank" rel="noopener">Читательский дневник</a>, где с большим удовольствием провожу “Книжные фанты” – игру, где каждую неделю можно задать кому-то и получить для себя случайную книгу для чтения.<br>Я, случается, пишу фанфикшен (по книгам Верна и не только), и в основном он собран в моём долгоживущем <a href="http://mariepaganel.diary.ru" target="_blank" rel="noopener">блоге на diary.ru</a>. Там же появляются личные посты, открытые только для постоянных читателей (подписка бесплатно, нужно только зарегистрироваться).</p><p>Должно быть, первые читатели этого блога – мои друзья и подписчики с других ресурсов. Привет вам всем! Если хотите, напишите приветственный комментарий, мне будет очень приятно!</p><h3 id="Благодарности"><a href="#Благодарности" class="headerlink" title="Благодарности"></a>Благодарности</h3><p>Этот блог потребовал немного больше работы, чем прежние. Я освоила <a href="http://hexo.io" target="_blank" rel="noopener">Hexo</a>, что, впрочем, несложно, и научилась публиковать статичные веб-сайты на <a href="http://pages.github.com" target="_blank" rel="noopener">GitHub Pages</a>. Мне помогли курсы <a href="https://app.pluralsight.com/library/courses/static-site-generator-build-better-blog" target="_blank" rel="noopener">“Build a Better Blog with a Static Site Generator”</a> и <a href="https://thegymnasium.com/courses/GYM/107/0/about" target="_blank" rel="noopener">“Modern Web Design”</a>.<br>Фотография-баннер сделана by Jessica Lewis, <a href="https://www.pexels.com/photo/red-fruits-on-table-699380/" target="_blank" rel="noopener">я взяла это фото с сайта Pexels</a>.</p><h3 id="Добро-пожаловать"><a href="#Добро-пожаловать" class="headerlink" title="Добро пожаловать!"></a>Добро пожаловать!</h3>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;left half-width&quot;&gt;&lt;br&gt;  &lt;img src=&quot;/images/typewriter.jpg&quot; alt=&quot;Новый блог! so exciting!&quot;&gt;&lt;br&gt;&lt;/figure&gt;

&lt;p&gt;Я создала новый блог, ура! Поскольку некоторые платформы, на которых я пытаюсь вести блоги, в последнее время то и дело оказываются под угрозой закрытия или блокировки, мне остаётся только завести ещё один блог!&lt;br&gt;Этот блог совершенно открытый и, вероятно, будет посвящён в основном вещам техническим, связанным с работой и личными открытиями. И, конечно, для Верна место найдётся! За личными постами, которые открываются только для друзей, придётся заходить в другие мои блоги. Я постараюсь их не забрасывать.&lt;br&gt;
    
    </summary>
    
      <category term="День за днём" scheme="http://kersonova.ru/categories/%D0%94%D0%B5%D0%BD%D1%8C-%D0%B7%D0%B0-%D0%B4%D0%BD%D1%91%D0%BC/"/>
    
    
      <category term="блог" scheme="http://kersonova.ru/tags/%D0%B1%D0%BB%D0%BE%D0%B3/"/>
    
      <category term="hexo" scheme="http://kersonova.ru/tags/hexo/"/>
    
  </entry>
  
</feed>
